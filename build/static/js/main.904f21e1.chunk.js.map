{"version":3,"sources":["components/Form.jsx","components/Item.jsx","components/ClientWidth.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","className","onChange","ev","target","placeholder","onClick","add","length","Item","item","computed","setCompoted","val","ClientWidth","window","innerWidth","width","setWidth","resizeHandle","useEffect","addEventListener","removeEventListener","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addHandle","setState","list","concat","state","components_ClientWidth","components_Form","map","index","components_Item","key","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRA6BeA,MAzBf,SAAcC,GAAO,IAAAC,EACOC,mBAAS,IADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACLI,EADKJ,EAAA,GAQnB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACEJ,MAAOA,EACPM,SAAU,SAAAC,GACRN,EAASM,EAAGC,OAAOR,QAErBK,UAAU,QACVI,YAAa,WAEfP,EAAAC,EAAAC,cAAA,UAAQC,UAAW,MAAOK,QAhBV,WACO,oBAAdhB,EAAMiB,KAAsBX,EAAMY,OAAS,GACpDlB,EAAMiB,IAAIX,GAEZC,EAAS,MAYP,eCPSY,MAZf,SAAcnB,GAAO,IAAAC,EACaC,mBAASF,EAAMoB,KAAKC,UADjClB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZoB,EADYlB,EAAA,GACFmB,EADEnB,EAAA,GAKnB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,QAJJ,WAClBM,GAAaD,KAITA,EAAqCb,EAAAC,EAAAC,cAAA,SAAIV,EAAMoB,KAAKG,KAAzCf,EAAAC,EAAAC,cAAA,SAAIV,EAAMoB,KAAKG,OCOnBC,MAff,WAAwB,IAAAvB,EACIC,mBAASuB,OAAOC,YADpBvB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACf0B,EADexB,EAAA,GACRyB,EADQzB,EAAA,GAEhB0B,EAAe,WACnBD,EAASH,OAAOC,aAQlB,OANAI,oBAAU,WAER,OADAL,OAAOM,iBAAiB,SAAUF,GAC3B,WACLJ,OAAOO,oBAAoB,SAAUH,MAIvCrB,EAAAC,EAAAC,cAAA,UAAKiB,IC6BMM,cApCb,SAAAA,EAAYjC,GAAO,IAAAkC,EAAA,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAAgC,KAAAH,IACjBC,EAAA9B,OAAAiC,EAAA,EAAAjC,CAAAgC,KAAAhC,OAAAkC,EAAA,EAAAlC,CAAA6B,GAAAM,KAAAH,KAAMpC,KAQRwC,UAAY,SAACjB,GACXW,EAAKO,SAAS,CACZC,KAAM,CAAC,CAAErB,UAAU,EAAOE,QAAOoB,OAAOT,EAAKU,MAAMF,SATrDR,EAAKU,MAAQ,CACXF,KAAM,CAAC,CACLrB,UAAU,EACVE,IAAK,oCALQW,wEAejB,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,CAAM7B,IAAKmB,KAAKI,YAChBhC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAEZyB,KAAKQ,MAAMF,KAAKK,IAAI,SAAC3B,EAAM4B,GACzB,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAM7B,KAAMA,EAAM8B,IAAKF,gBAxB5BG,aCMEC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.904f21e1.chunk.js","sourcesContent":["import './Form.css'\r\n\r\nimport React, { useState } from 'react'\r\n\r\nfunction Form(props) {\r\n  const [value, setValue] = useState('')\r\n  const clickHandle = () => {\r\n    if (typeof props.add === 'function' && value.length > 0) {\r\n      props.add(value)\r\n    }\r\n    setValue('')\r\n  }\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <input\r\n        value={value}\r\n        onChange={ev => {\r\n          setValue(ev.target.value)\r\n        }}\r\n        className=\"input\"\r\n        placeholder={'todo..'}\r\n      />\r\n      <button className={'btn'} onClick={clickHandle}>\r\n        Add\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React, { useState } from 'react'\r\nimport './Item.css'\r\n\r\nfunction Item(props) {\r\n  const [computed, setCompoted] = useState(props.item.computed)\r\n  const clickHandle = () => {\r\n    setCompoted(!computed)\r\n  }\r\n  return (\r\n    <div className=\"item\" onClick={clickHandle}>\r\n      {!computed ? <p>{props.item.val}</p> : <s>{props.item.val}</s>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Item\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction ClientWidth () {\r\n  const [width, setWidth] = useState(window.innerWidth)\r\n  const resizeHandle = () => {\r\n    setWidth(window.innerWidth)\r\n  }\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", resizeHandle)\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandle)\r\n    }\r\n  })\r\n  return (\r\n    <h1>{width}</h1>\r\n  )\r\n}\r\nexport default ClientWidth","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Form from './components/Form';\r\nimport Item from './components/Item';\r\nimport ClientWidth from './components/ClientWidth'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: [{\r\n        computed: false,\r\n        val: '初始化内容'\r\n      }]\r\n    }\r\n  }\r\n  addHandle = (val) => {\r\n    this.setState({\r\n      list: [{ computed: false, val }].concat(this.state.list)\r\n    });\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <ClientWidth />\r\n        <div className=\"App\">\r\n          <Form add={this.addHandle} />\r\n          <div className={'list'}>\r\n            {\r\n              this.state.list.map((item, index) => {\r\n                return <Item item={item} key={index} ></Item>\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}